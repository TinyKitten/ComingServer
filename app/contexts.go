// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ComingServer": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/TinyKitten/ComingServer/design
// --out=$(GOPATH)/src/github.com/TinyKitten/ComingServer
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// AuthAuthContext provides the auth auth action context.
type AuthAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AuthAuthPayload
}

// NewAuthAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller auth action.
func NewAuthAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// authAuthPayload is the auth auth action payload.
type authAuthPayload struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// パスワード
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// スクリーンネーム
	ScreenName *string `form:"screen_name,omitempty" json:"screen_name,omitempty" yaml:"screen_name,omitempty" xml:"screen_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *authAuthPayload) Validate() (err error) {
	if payload.ScreenName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "screen_name"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 6, true))
		}
	}
	return
}

// Publicize creates AuthAuthPayload from authAuthPayload
func (payload *authAuthPayload) Publicize() *AuthAuthPayload {
	var pub AuthAuthPayload
	if payload.ID != nil {
		pub.ID = payload.ID
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.ScreenName != nil {
		pub.ScreenName = *payload.ScreenName
	}
	return &pub
}

// AuthAuthPayload is the auth auth action payload.
type AuthAuthPayload struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// パスワード
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
	// スクリーンネーム
	ScreenName string `form:"screen_name" json:"screen_name" yaml:"screen_name" xml:"screen_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *AuthAuthPayload) Validate() (err error) {
	if payload.ScreenName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "screen_name"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if utf8.RuneCountInString(payload.Password) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 6, true))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AuthAuthContext) OK(r *AuthSucces) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.auth.succes+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AuthAuthContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthAuthContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddPeersContext provides the peers add action context.
type AddPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddPeersPayload
}

// NewAddPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller add action.
func NewAddPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addPeersPayload is the peers add action payload.
type addPeersPayload struct {
	// ポッド名
	Code *string `form:"code,omitempty" json:"code,omitempty" yaml:"code,omitempty" xml:"code,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addPeersPayload) Validate() (err error) {
	if payload.Code == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "code"))
	}
	return
}

// Publicize creates AddPeersPayload from addPeersPayload
func (payload *addPeersPayload) Publicize() *AddPeersPayload {
	var pub AddPeersPayload
	if payload.Code != nil {
		pub.Code = *payload.Code
	}
	return &pub
}

// AddPeersPayload is the peers add action payload.
type AddPeersPayload struct {
	// ポッド名
	Code string `form:"code" json:"code" yaml:"code" xml:"code"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddPeersPayload) Validate() (err error) {
	if payload.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "code"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddPeersContext) Created(r *Pod) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pod+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddPeersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CurrentLocationPeersContext provides the peers current location action context.
type CurrentLocationPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewCurrentLocationPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller current location action.
func NewCurrentLocationPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*CurrentLocationPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CurrentLocationPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CurrentLocationPeersContext) OK(r *PeerLocation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.peer.location+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CurrentLocationPeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CurrentLocationPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListPeersContext provides the peers list action context.
type ListPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit  int
	Offset int
}

// NewListPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller list action.
func NewListPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 100
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPeersContext) OK(r PeerCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.peer+json; type=collection")
	}
	if r == nil {
		r = PeerCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// LocationsPeersContext provides the peers locations action context.
type LocationsPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewLocationsPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller locations action.
func NewLocationsPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*LocationsPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LocationsPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LocationsPeersContext) OK(r PeerLocationCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.peer.location+json; type=collection")
	}
	if r == nil {
		r = PeerLocationCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *LocationsPeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LocationsPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RegenerateTokenPeersContext provides the peers regenerate token action context.
type RegenerateTokenPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewRegenerateTokenPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller regenerate token action.
func NewRegenerateTokenPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegenerateTokenPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegenerateTokenPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RegenerateTokenPeersContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegenerateTokenPeersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RegenerateTokenPeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RegenerateTokenPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SendLocationPeersContext provides the peers send location action context.
type SendLocationPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *SendLocationPeersPayload
}

// NewSendLocationPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller send location action.
func NewSendLocationPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*SendLocationPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SendLocationPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// sendLocationPeersPayload is the peers send location action payload.
type sendLocationPeersPayload struct {
	// 緯度
	Latitude *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	// スクリーンネーム
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *sendLocationPeersPayload) Validate() (err error) {
	if payload.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "latitude"))
	}
	if payload.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "longitude"))
	}
	return
}

// Publicize creates SendLocationPeersPayload from sendLocationPeersPayload
func (payload *sendLocationPeersPayload) Publicize() *SendLocationPeersPayload {
	var pub SendLocationPeersPayload
	if payload.Latitude != nil {
		pub.Latitude = *payload.Latitude
	}
	if payload.Longitude != nil {
		pub.Longitude = *payload.Longitude
	}
	return &pub
}

// SendLocationPeersPayload is the peers send location action payload.
type SendLocationPeersPayload struct {
	// 緯度
	Latitude float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	// スクリーンネーム
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
}

// Validate runs the validation rules defined in the design.
func (payload *SendLocationPeersPayload) Validate() (err error) {

	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SendLocationPeersContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SendLocationPeersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SendLocationPeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SendLocationPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowPeersContext provides the peers show action context.
type ShowPeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowPeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller show action.
func NewShowPeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPeersContext) OK(r *Peer) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.peer+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdatePeersContext provides the peers update action context.
type UpdatePeersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Code    *int
	ID      string
	Payload *UpdatePeersPayload
}

// NewUpdatePeersContext parses the incoming request URL and body, performs validations and creates the
// context used by the peers controller update action.
func NewUpdatePeersContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdatePeersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdatePeersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCode := req.Params["code"]
	if len(paramCode) > 0 {
		rawCode := paramCode[0]
		if code, err2 := strconv.Atoi(rawCode); err2 == nil {
			tmp9 := code
			tmp8 := &tmp9
			rctx.Code = tmp8
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("code", rawCode, "integer"))
		}
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// updatePeersPayload is the peers update action payload.
type updatePeersPayload struct {
	// 名前
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Publicize creates UpdatePeersPayload from updatePeersPayload
func (payload *updatePeersPayload) Publicize() *UpdatePeersPayload {
	var pub UpdatePeersPayload
	if payload.Name != nil {
		pub.Name = payload.Name
	}
	return &pub
}

// UpdatePeersPayload is the peers update action payload.
type UpdatePeersPayload struct {
	// 名前
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePeersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePeersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePeersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdatePeersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddPodsContext provides the pods add action context.
type AddPodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddPodsPayload
}

// NewAddPodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pods controller add action.
func NewAddPodsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddPodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddPodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addPodsPayload is the pods add action payload.
type addPodsPayload struct {
	// ポッド名
	Code *string `form:"code,omitempty" json:"code,omitempty" yaml:"code,omitempty" xml:"code,omitempty"`
	// 緯度
	Latitude *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	// スクリーンネーム
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addPodsPayload) Validate() (err error) {
	if payload.Code == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "code"))
	}
	if payload.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "latitude"))
	}
	if payload.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "longitude"))
	}
	return
}

// Publicize creates AddPodsPayload from addPodsPayload
func (payload *addPodsPayload) Publicize() *AddPodsPayload {
	var pub AddPodsPayload
	if payload.Code != nil {
		pub.Code = *payload.Code
	}
	if payload.Latitude != nil {
		pub.Latitude = *payload.Latitude
	}
	if payload.Longitude != nil {
		pub.Longitude = *payload.Longitude
	}
	return &pub
}

// AddPodsPayload is the pods add action payload.
type AddPodsPayload struct {
	// ポッド名
	Code string `form:"code" json:"code" yaml:"code" xml:"code"`
	// 緯度
	Latitude float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	// スクリーンネーム
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddPodsPayload) Validate() (err error) {
	if payload.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "code"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddPodsContext) Created(r *Pod) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pod+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddPodsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddPodsContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListPodsContext provides the pods list action context.
type ListPodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit  int
	Offset int
}

// NewListPodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pods controller list action.
func NewListPodsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 100
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPodsContext) OK(r PodCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pod+json; type=collection")
	}
	if r == nil {
		r = PodCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPodsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPodsContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RegenerateTokenPodsContext provides the pods regenerate token action context.
type RegenerateTokenPodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewRegenerateTokenPodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pods controller regenerate token action.
func NewRegenerateTokenPodsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegenerateTokenPodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegenerateTokenPodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RegenerateTokenPodsContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegenerateTokenPodsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RegenerateTokenPodsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RegenerateTokenPodsContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowPodsContext provides the pods show action context.
type ShowPodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowPodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pods controller show action.
func NewShowPodsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPodsContext) OK(r *Pod) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pod+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPodsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPodsContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdatePodsContext provides the pods update action context.
type UpdatePodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdatePodsPayload
}

// NewUpdatePodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pods controller update action.
func NewUpdatePodsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdatePodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdatePodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// updatePodsPayload is the pods update action payload.
type updatePodsPayload struct {
	// 緯度
	Latitude *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	// 経度
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
	// 名前
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Publicize creates UpdatePodsPayload from updatePodsPayload
func (payload *updatePodsPayload) Publicize() *UpdatePodsPayload {
	var pub UpdatePodsPayload
	if payload.Latitude != nil {
		pub.Latitude = payload.Latitude
	}
	if payload.Longitude != nil {
		pub.Longitude = payload.Longitude
	}
	if payload.Name != nil {
		pub.Name = payload.Name
	}
	return &pub
}

// UpdatePodsPayload is the pods update action payload.
type UpdatePodsPayload struct {
	// 緯度
	Latitude *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	// 経度
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
	// 名前
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePodsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePodsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePodsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdatePodsContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ConnectSendCurrentPeerLocationContext provides the send current peer location connect action context.
type ConnectSendCurrentPeerLocationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Latitude  float64
	Longitude float64
	Token     string
}

// NewConnectSendCurrentPeerLocationContext parses the incoming request URL and body, performs validations and creates the
// context used by the send current peer location controller connect action.
func NewConnectSendCurrentPeerLocationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConnectSendCurrentPeerLocationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConnectSendCurrentPeerLocationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLatitude := req.Params["latitude"]
	if len(paramLatitude) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("latitude"))
	} else {
		rawLatitude := paramLatitude[0]
		if latitude, err2 := strconv.ParseFloat(rawLatitude, 64); err2 == nil {
			rctx.Latitude = latitude
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("latitude", rawLatitude, "number"))
		}
	}
	paramLongitude := req.Params["longitude"]
	if len(paramLongitude) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("longitude"))
	} else {
		rawLongitude := paramLongitude[0]
		if longitude, err2 := strconv.ParseFloat(rawLongitude, 64); err2 == nil {
			rctx.Longitude = longitude
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("longitude", rawLongitude, "number"))
		}
	}
	paramToken := req.Params["token"]
	if len(paramToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("token"))
	} else {
		rawToken := paramToken[0]
		rctx.Token = rawToken
	}
	return &rctx, err
}

// AddUsersContext provides the users add action context.
type AddUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddUsersPayload
}

// NewAddUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller add action.
func NewAddUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addUsersPayload is the users add action payload.
type addUsersPayload struct {
	// パスワード
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// 権限ID
	PrivilegeID *int `form:"privilege_id,omitempty" json:"privilege_id,omitempty" yaml:"privilege_id,omitempty" xml:"privilege_id,omitempty"`
	// スクリーンネーム
	ScreenName *string `form:"screen_name,omitempty" json:"screen_name,omitempty" yaml:"screen_name,omitempty" xml:"screen_name,omitempty"`
}

// Finalize sets the default values defined in the design.
func (payload *addUsersPayload) Finalize() {
	var defaultPrivilegeID = 2
	if payload.PrivilegeID == nil {
		payload.PrivilegeID = &defaultPrivilegeID
	}
}

// Validate runs the validation rules defined in the design.
func (payload *addUsersPayload) Validate() (err error) {
	if payload.PrivilegeID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "privilege_id"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.ScreenName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "screen_name"))
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 6, true))
		}
	}
	return
}

// Publicize creates AddUsersPayload from addUsersPayload
func (payload *addUsersPayload) Publicize() *AddUsersPayload {
	var pub AddUsersPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.PrivilegeID != nil {
		pub.PrivilegeID = *payload.PrivilegeID
	}
	if payload.ScreenName != nil {
		pub.ScreenName = *payload.ScreenName
	}
	return &pub
}

// AddUsersPayload is the users add action payload.
type AddUsersPayload struct {
	// パスワード
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
	// 権限ID
	PrivilegeID int `form:"privilege_id" json:"privilege_id" yaml:"privilege_id" xml:"privilege_id"`
	// スクリーンネーム
	ScreenName string `form:"screen_name" json:"screen_name" yaml:"screen_name" xml:"screen_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddUsersPayload) Validate() (err error) {

	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.ScreenName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "screen_name"))
	}
	if utf8.RuneCountInString(payload.Password) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 6, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddUsersContext) Created(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddUsersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddUsersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListUsersContext provides the users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit  int
	Offset int
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 100
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(r UserCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListUsersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUsersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUsersContext provides the users show action context.
type ShowUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show action.
func NewShowUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUsersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUsersContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
