// Package models contains the types for schema 'comingserver'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// User represents a row from 'comingserver.users'.
type User struct {
	ID          uint64    `json:"id"`           // id
	ScreenName  string    `json:"screen_name"`  // screen_name
	Password    string    `json:"password"`     // password
	PrivilegeID uint64    `json:"privilege_id"` // privilege_id
	CreatedAt   time.Time `json:"created_at"`   // created_at
	UpdatedAt   time.Time `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO comingserver.users (` +
		`screen_name, password, privilege_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.ScreenName, u.Password, u.PrivilegeID, u.CreatedAt, u.UpdatedAt)
	res, err := db.Exec(sqlstr, u.ScreenName, u.Password, u.PrivilegeID, u.CreatedAt, u.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = uint64(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE comingserver.users SET ` +
		`screen_name = ?, password = ?, privilege_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, u.ScreenName, u.Password, u.PrivilegeID, u.CreatedAt, u.UpdatedAt, u.ID)
	_, err = db.Exec(sqlstr, u.ScreenName, u.Password, u.PrivilegeID, u.CreatedAt, u.UpdatedAt, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM comingserver.users WHERE id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// Privilege returns the Privilege associated with the User's PrivilegeID (privilege_id).
//
// Generated from foreign key 'users_ibfk_1'.
func (u *User) Privilege(db XODB) (*Privilege, error) {
	return PrivilegeByID(db, u.PrivilegeID)
}

// UsersByPrivilegeID retrieves a row from 'comingserver.users' as a User.
//
// Generated from index 'privilege_id'.
func UsersByPrivilegeID(db XODB, privilegeID uint64) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, screen_name, password, privilege_id, created_at, updated_at ` +
		`FROM comingserver.users ` +
		`WHERE privilege_id = ?`

	// run query
	XOLog(sqlstr, privilegeID)
	q, err := db.Query(sqlstr, privilegeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.ScreenName, &u.Password, &u.PrivilegeID, &u.CreatedAt, &u.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByScreenName retrieves a row from 'comingserver.users' as a User.
//
// Generated from index 'screen_name'.
func UserByScreenName(db XODB, screenName string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, screen_name, password, privilege_id, created_at, updated_at ` +
		`FROM comingserver.users ` +
		`WHERE screen_name = ?`

	// run query
	XOLog(sqlstr, screenName)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, screenName).Scan(&u.ID, &u.ScreenName, &u.Password, &u.PrivilegeID, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'comingserver.users' as a User.
//
// Generated from index 'users_id_pkey'.
func UserByID(db XODB, id uint64) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, screen_name, password, privilege_id, created_at, updated_at ` +
		`FROM comingserver.users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.ScreenName, &u.Password, &u.PrivilegeID, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
