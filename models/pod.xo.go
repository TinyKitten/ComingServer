// Package models contains the types for schema 'comingserver'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Pod represents a row from 'comingserver.pods'.
type Pod struct {
	ID        uint64       `json:"id"`         // id
	Code      string       `json:"code"`       // code
	Latitude  float64      `json:"latitude"`   // latitude
	Longitude float64      `json:"longitude"`  // longitude
	Rumbling  sql.NullBool `json:"rumbling"`   // rumbling
	Token     string       `json:"token"`      // token
	CreatedAt time.Time    `json:"created_at"` // created_at
	UpdatedAt time.Time    `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pod exists in the database.
func (p *Pod) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pod has been deleted from the database.
func (p *Pod) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pod to the database.
func (p *Pod) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO comingserver.pods (` +
		`code, latitude, longitude, rumbling, token, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.Code, p.Latitude, p.Longitude, p.Rumbling, p.Token, p.CreatedAt, p.UpdatedAt)
	res, err := db.Exec(sqlstr, p.Code, p.Latitude, p.Longitude, p.Rumbling, p.Token, p.CreatedAt, p.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = uint64(id)
	p._exists = true

	return nil
}

// Update updates the Pod in the database.
func (p *Pod) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE comingserver.pods SET ` +
		`code = ?, latitude = ?, longitude = ?, rumbling = ?, token = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.Code, p.Latitude, p.Longitude, p.Rumbling, p.Token, p.CreatedAt, p.UpdatedAt, p.ID)
	_, err = db.Exec(sqlstr, p.Code, p.Latitude, p.Longitude, p.Rumbling, p.Token, p.CreatedAt, p.UpdatedAt, p.ID)
	return err
}

// Save saves the Pod to the database.
func (p *Pod) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Pod from the database.
func (p *Pod) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM comingserver.pods WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PodByCode retrieves a row from 'comingserver.pods' as a Pod.
//
// Generated from index 'code'.
func PodByCode(db XODB, code string) (*Pod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, code, latitude, longitude, rumbling, token, created_at, updated_at ` +
		`FROM comingserver.pods ` +
		`WHERE code = ?`

	// run query
	XOLog(sqlstr, code)
	p := Pod{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, code).Scan(&p.ID, &p.Code, &p.Latitude, &p.Longitude, &p.Rumbling, &p.Token, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PodByID retrieves a row from 'comingserver.pods' as a Pod.
//
// Generated from index 'pods_id_pkey'.
func PodByID(db XODB, id uint64) (*Pod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, code, latitude, longitude, rumbling, token, created_at, updated_at ` +
		`FROM comingserver.pods ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Pod{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Code, &p.Latitude, &p.Longitude, &p.Rumbling, &p.Token, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
