// Package models contains the types for schema 'comingserver'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// PeersMap represents a row from 'comingserver.peers_map'.
type PeersMap struct {
	ID        uint64    `json:"id"`         // id
	PodID     uint64    `json:"pod_id"`     // pod_id
	PeerID    uint64    `json:"peer_id"`    // peer_id
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PeersMap exists in the database.
func (pm *PeersMap) Exists() bool {
	return pm._exists
}

// Deleted provides information if the PeersMap has been deleted from the database.
func (pm *PeersMap) Deleted() bool {
	return pm._deleted
}

// Insert inserts the PeersMap to the database.
func (pm *PeersMap) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO comingserver.peers_map (` +
		`pod_id, peer_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pm.PodID, pm.PeerID, pm.CreatedAt, pm.UpdatedAt)
	res, err := db.Exec(sqlstr, pm.PodID, pm.PeerID, pm.CreatedAt, pm.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pm.ID = uint64(id)
	pm._exists = true

	return nil
}

// Update updates the PeersMap in the database.
func (pm *PeersMap) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE comingserver.peers_map SET ` +
		`pod_id = ?, peer_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pm.PodID, pm.PeerID, pm.CreatedAt, pm.UpdatedAt, pm.ID)
	_, err = db.Exec(sqlstr, pm.PodID, pm.PeerID, pm.CreatedAt, pm.UpdatedAt, pm.ID)
	return err
}

// Save saves the PeersMap to the database.
func (pm *PeersMap) Save(db XODB) error {
	if pm.Exists() {
		return pm.Update(db)
	}

	return pm.Insert(db)
}

// Delete deletes the PeersMap from the database.
func (pm *PeersMap) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return nil
	}

	// if deleted, bail
	if pm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM comingserver.peers_map WHERE id = ?`

	// run query
	XOLog(sqlstr, pm.ID)
	_, err = db.Exec(sqlstr, pm.ID)
	if err != nil {
		return err
	}

	// set deleted
	pm._deleted = true

	return nil
}

// Pod returns the Pod associated with the PeersMap's PodID (pod_id).
//
// Generated from foreign key 'peers_map_ibfk_1'.
func (pm *PeersMap) Pod(db XODB) (*Pod, error) {
	return PodByID(db, pm.PodID)
}

// Peer returns the Peer associated with the PeersMap's PeerID (peer_id).
//
// Generated from foreign key 'peers_map_ibfk_2'.
func (pm *PeersMap) Peer(db XODB) (*Peer, error) {
	return PeerByID(db, pm.PeerID)
}

// PeersMapByPeerID retrieves a row from 'comingserver.peers_map' as a PeersMap.
//
// Generated from index 'peer_id'.
func PeersMapByPeerID(db XODB, peerID uint64) (*PeersMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pod_id, peer_id, created_at, updated_at ` +
		`FROM comingserver.peers_map ` +
		`WHERE peer_id = ?`

	// run query
	XOLog(sqlstr, peerID)
	pm := PeersMap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, peerID).Scan(&pm.ID, &pm.PodID, &pm.PeerID, &pm.CreatedAt, &pm.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &pm, nil
}

// PeersMapByID retrieves a row from 'comingserver.peers_map' as a PeersMap.
//
// Generated from index 'peers_map_id_pkey'.
func PeersMapByID(db XODB, id uint64) (*PeersMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pod_id, peer_id, created_at, updated_at ` +
		`FROM comingserver.peers_map ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pm := PeersMap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pm.ID, &pm.PodID, &pm.PeerID, &pm.CreatedAt, &pm.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &pm, nil
}

// PeersMapsByPodID retrieves a row from 'comingserver.peers_map' as a PeersMap.
//
// Generated from index 'pod_id'.
func PeersMapsByPodID(db XODB, podID uint64) ([]*PeersMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pod_id, peer_id, created_at, updated_at ` +
		`FROM comingserver.peers_map ` +
		`WHERE pod_id = ?`

	// run query
	XOLog(sqlstr, podID)
	q, err := db.Query(sqlstr, podID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PeersMap{}
	for q.Next() {
		pm := PeersMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&pm.ID, &pm.PodID, &pm.PeerID, &pm.CreatedAt, &pm.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &pm)
	}

	return res, nil
}
