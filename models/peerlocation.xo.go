// Package models contains the types for schema 'comingserver'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// PeerLocation represents a row from 'comingserver.peer_locations'.
type PeerLocation struct {
	ID        uint64    `json:"id"`         // id
	PeerID    uint64    `json:"peer_id"`    // peer_id
	Latitude  float64   `json:"latitude"`   // latitude
	Longitude float64   `json:"longitude"`  // longitude
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PeerLocation exists in the database.
func (pl *PeerLocation) Exists() bool {
	return pl._exists
}

// Deleted provides information if the PeerLocation has been deleted from the database.
func (pl *PeerLocation) Deleted() bool {
	return pl._deleted
}

// Insert inserts the PeerLocation to the database.
func (pl *PeerLocation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO comingserver.peer_locations (` +
		`peer_id, latitude, longitude, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pl.PeerID, pl.Latitude, pl.Longitude, pl.CreatedAt, pl.UpdatedAt)
	res, err := db.Exec(sqlstr, pl.PeerID, pl.Latitude, pl.Longitude, pl.CreatedAt, pl.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pl.ID = uint64(id)
	pl._exists = true

	return nil
}

// Update updates the PeerLocation in the database.
func (pl *PeerLocation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE comingserver.peer_locations SET ` +
		`peer_id = ?, latitude = ?, longitude = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pl.PeerID, pl.Latitude, pl.Longitude, pl.CreatedAt, pl.UpdatedAt, pl.ID)
	_, err = db.Exec(sqlstr, pl.PeerID, pl.Latitude, pl.Longitude, pl.CreatedAt, pl.UpdatedAt, pl.ID)
	return err
}

// Save saves the PeerLocation to the database.
func (pl *PeerLocation) Save(db XODB) error {
	if pl.Exists() {
		return pl.Update(db)
	}

	return pl.Insert(db)
}

// Delete deletes the PeerLocation from the database.
func (pl *PeerLocation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pl._exists {
		return nil
	}

	// if deleted, bail
	if pl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM comingserver.peer_locations WHERE id = ?`

	// run query
	XOLog(sqlstr, pl.ID)
	_, err = db.Exec(sqlstr, pl.ID)
	if err != nil {
		return err
	}

	// set deleted
	pl._deleted = true

	return nil
}

// Peer returns the Peer associated with the PeerLocation's PeerID (peer_id).
//
// Generated from foreign key 'peer_locations_ibfk_1'.
func (pl *PeerLocation) Peer(db XODB) (*Peer, error) {
	return PeerByID(db, pl.PeerID)
}

// PeerLocationsByPeerID retrieves a row from 'comingserver.peer_locations' as a PeerLocation.
//
// Generated from index 'peer_id'.
func PeerLocationsByPeerID(db XODB, peerID uint64) ([]*PeerLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, peer_id, latitude, longitude, created_at, updated_at ` +
		`FROM comingserver.peer_locations ` +
		`WHERE peer_id = ?`

	// run query
	XOLog(sqlstr, peerID)
	q, err := db.Query(sqlstr, peerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PeerLocation{}
	for q.Next() {
		pl := PeerLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&pl.ID, &pl.PeerID, &pl.Latitude, &pl.Longitude, &pl.CreatedAt, &pl.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &pl)
	}

	return res, nil
}

// PeerLocationByID retrieves a row from 'comingserver.peer_locations' as a PeerLocation.
//
// Generated from index 'peer_locations_id_pkey'.
func PeerLocationByID(db XODB, id uint64) (*PeerLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, peer_id, latitude, longitude, created_at, updated_at ` +
		`FROM comingserver.peer_locations ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pl := PeerLocation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pl.ID, &pl.PeerID, &pl.Latitude, &pl.Longitude, &pl.CreatedAt, &pl.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &pl, nil
}
