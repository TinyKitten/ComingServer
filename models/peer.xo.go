// Package models contains the types for schema 'comingserver'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Peer represents a row from 'comingserver.peers'.
type Peer struct {
	ID          uint64       `json:"id"`          // id
	Code        string       `json:"code"`        // code
	Token       string       `json:"token"`       // token
	CreatedAt   time.Time    `json:"created_at"`  // created_at
	UpdatedAt   time.Time    `json:"updated_at"`  // updated_at
	Approaching sql.NullBool `json:"approaching"` // approaching

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Peer exists in the database.
func (p *Peer) Exists() bool {
	return p._exists
}

// Deleted provides information if the Peer has been deleted from the database.
func (p *Peer) Deleted() bool {
	return p._deleted
}

// Insert inserts the Peer to the database.
func (p *Peer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO comingserver.peers (` +
		`code, token, created_at, updated_at, approaching` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.Code, p.Token, p.CreatedAt, p.UpdatedAt, p.Approaching)
	res, err := db.Exec(sqlstr, p.Code, p.Token, p.CreatedAt, p.UpdatedAt, p.Approaching)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = uint64(id)
	p._exists = true

	return nil
}

// Update updates the Peer in the database.
func (p *Peer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE comingserver.peers SET ` +
		`code = ?, token = ?, created_at = ?, updated_at = ?, approaching = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.Code, p.Token, p.CreatedAt, p.UpdatedAt, p.Approaching, p.ID)
	_, err = db.Exec(sqlstr, p.Code, p.Token, p.CreatedAt, p.UpdatedAt, p.Approaching, p.ID)
	return err
}

// Save saves the Peer to the database.
func (p *Peer) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Peer from the database.
func (p *Peer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM comingserver.peers WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PeerByCode retrieves a row from 'comingserver.peers' as a Peer.
//
// Generated from index 'code'.
func PeerByCode(db XODB, code string) (*Peer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, code, token, created_at, updated_at, approaching ` +
		`FROM comingserver.peers ` +
		`WHERE code = ?`

	// run query
	XOLog(sqlstr, code)
	p := Peer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, code).Scan(&p.ID, &p.Code, &p.Token, &p.CreatedAt, &p.UpdatedAt, &p.Approaching)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PeerByID retrieves a row from 'comingserver.peers' as a Peer.
//
// Generated from index 'peers_id_pkey'.
func PeerByID(db XODB, id uint64) (*Peer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, code, token, created_at, updated_at, approaching ` +
		`FROM comingserver.peers ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Peer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Code, &p.Token, &p.CreatedAt, &p.UpdatedAt, &p.Approaching)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
