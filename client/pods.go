// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ComingServer": pods Resource Client
//
// Command:
// $ goagen
// --design=github.com/TinyKitten/ComingServer/design
// --out=$(GOPATH)/src/github.com/TinyKitten/ComingServer
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddPodsPayload is the pods add action payload.
type AddPodsPayload struct {
	// ポッド名
	Code string `form:"code" json:"code" yaml:"code" xml:"code"`
	// 緯度
	Latitude float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	// スクリーンネーム
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
}

// AddPodsPath computes a request path to the add action of pods.
func AddPodsPath() string {

	return fmt.Sprintf("/v1/pods")
}

// ポッド追加
func (c *Client) AddPods(ctx context.Context, path string, payload *AddPodsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddPodsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddPodsRequest create the request corresponding to the add action endpoint of the pods resource.
func (c *Client) NewAddPodsRequest(ctx context.Context, path string, payload *AddPodsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListPodsPath computes a request path to the list action of pods.
func ListPodsPath() string {

	return fmt.Sprintf("/v1/pods")
}

// すべてのポッドを取得
func (c *Client) ListPods(ctx context.Context, path string, limit *int, offset *int) (*http.Response, error) {
	req, err := c.NewListPodsRequest(ctx, path, limit, offset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPodsRequest create the request corresponding to the list action endpoint of the pods resource.
func (c *Client) NewListPodsRequest(ctx context.Context, path string, limit *int, offset *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if limit != nil {
		tmp24 := strconv.Itoa(*limit)
		values.Set("limit", tmp24)
	}
	if offset != nil {
		tmp25 := strconv.Itoa(*offset)
		values.Set("offset", tmp25)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RegenerateTokenPodsPath computes a request path to the regenerate token action of pods.
func RegenerateTokenPodsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/pods/%s/token", param0)
}

// トークン再発行
func (c *Client) RegenerateTokenPods(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewRegenerateTokenPodsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRegenerateTokenPodsRequest create the request corresponding to the regenerate token action endpoint of the pods resource.
func (c *Client) NewRegenerateTokenPodsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowPodsPath computes a request path to the show action of pods.
func ShowPodsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/pods/%s", param0)
}

// ポッドをIDで取得
func (c *Client) ShowPods(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPodsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPodsRequest create the request corresponding to the show action endpoint of the pods resource.
func (c *Client) NewShowPodsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdatePodsPayload is the pods update action payload.
type UpdatePodsPayload struct {
	// コード
	Code *string `form:"code,omitempty" json:"code,omitempty" yaml:"code,omitempty" xml:"code,omitempty"`
	// 緯度
	Latitude *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	// 経度
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
}

// UpdatePodsPath computes a request path to the update action of pods.
func UpdatePodsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/pods/%s", param0)
}

// ポッド更新
func (c *Client) UpdatePods(ctx context.Context, path string, payload *UpdatePodsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdatePodsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdatePodsRequest create the request corresponding to the update action endpoint of the pods resource.
func (c *Client) NewUpdatePodsRequest(ctx context.Context, path string, payload *UpdatePodsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
