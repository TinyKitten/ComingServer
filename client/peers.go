// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ComingServer": peers Resource Client
//
// Command:
// $ goagen
// --design=github.com/TinyKitten/ComingServer/design
// --out=$(GOPATH)/src/github.com/TinyKitten/ComingServer
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddPeersPayload is the peers add action payload.
type AddPeersPayload struct {
	// ピアコード
	Code string `form:"code" json:"code" yaml:"code" xml:"code"`
	// ポッドID
	PodID int `form:"pod_id" json:"pod_id" yaml:"pod_id" xml:"pod_id"`
}

// AddPeersPath computes a request path to the add action of peers.
func AddPeersPath() string {

	return fmt.Sprintf("/v1/peers")
}

// ピア追加
func (c *Client) AddPeers(ctx context.Context, path string, payload *AddPeersPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddPeersRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddPeersRequest create the request corresponding to the add action endpoint of the peers resource.
func (c *Client) NewAddPeersRequest(ctx context.Context, path string, payload *AddPeersPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// CurrentLocationPeersPath computes a request path to the current location action of peers.
func CurrentLocationPeersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/peers/%s/location", param0)
}

// ピアの現在位置
func (c *Client) CurrentLocationPeers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCurrentLocationPeersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCurrentLocationPeersRequest create the request corresponding to the current location action endpoint of the peers resource.
func (c *Client) NewCurrentLocationPeersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListPeersPath computes a request path to the list action of peers.
func ListPeersPath() string {

	return fmt.Sprintf("/v1/peers")
}

// すべてのピアを取得
func (c *Client) ListPeers(ctx context.Context, path string, limit *int, offset *int) (*http.Response, error) {
	req, err := c.NewListPeersRequest(ctx, path, limit, offset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPeersRequest create the request corresponding to the list action endpoint of the peers resource.
func (c *Client) NewListPeersRequest(ctx context.Context, path string, limit *int, offset *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if limit != nil {
		tmp22 := strconv.Itoa(*limit)
		values.Set("limit", tmp22)
	}
	if offset != nil {
		tmp23 := strconv.Itoa(*offset)
		values.Set("offset", tmp23)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// LocationsPeersPath computes a request path to the locations action of peers.
func LocationsPeersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/peers/%s/locations", param0)
}

// ピアの位置履歴
func (c *Client) LocationsPeers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLocationsPeersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLocationsPeersRequest create the request corresponding to the locations action endpoint of the peers resource.
func (c *Client) NewLocationsPeersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// RegenerateTokenPeersPath computes a request path to the regenerate token action of peers.
func RegenerateTokenPeersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/peers/%s/token", param0)
}

// トークン再発行
func (c *Client) RegenerateTokenPeers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewRegenerateTokenPeersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRegenerateTokenPeersRequest create the request corresponding to the regenerate token action endpoint of the peers resource.
func (c *Client) NewRegenerateTokenPeersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SendLocationPeersPayload is the peers send location action payload.
type SendLocationPeersPayload struct {
	// 緯度
	Latitude float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	// スクリーンネーム
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
	// ピアトークン
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// SendLocationPeersPath computes a request path to the send location action of peers.
func SendLocationPeersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/peers/%s/locations", param0)
}

// ピア位置送信
func (c *Client) SendLocationPeers(ctx context.Context, path string, payload *SendLocationPeersPayload, contentType string) (*http.Response, error) {
	req, err := c.NewSendLocationPeersRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSendLocationPeersRequest create the request corresponding to the send location action endpoint of the peers resource.
func (c *Client) NewSendLocationPeersRequest(ctx context.Context, path string, payload *SendLocationPeersPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.OptionalJWTSigner != nil {
		if err := c.OptionalJWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowPeersPath computes a request path to the show action of peers.
func ShowPeersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/peers/%s", param0)
}

// ピアをIDで取得
func (c *Client) ShowPeers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPeersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPeersRequest create the request corresponding to the show action endpoint of the peers resource.
func (c *Client) NewShowPeersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdatePeersPayload is the peers update action payload.
type UpdatePeersPayload struct {
	// コード
	Code *string `form:"code,omitempty" json:"code,omitempty" yaml:"code,omitempty" xml:"code,omitempty"`
}

// UpdatePeersPath computes a request path to the update action of peers.
func UpdatePeersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/peers/%s", param0)
}

// ピア更新
func (c *Client) UpdatePeers(ctx context.Context, path string, payload *UpdatePeersPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdatePeersRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdatePeersRequest create the request corresponding to the update action endpoint of the peers resource.
func (c *Client) NewUpdatePeersRequest(ctx context.Context, path string, payload *UpdatePeersPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
