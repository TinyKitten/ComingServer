// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ComingServer": users Resource Client
//
// Command:
// $ goagen
// --design=github.com/TinyKitten/ComingServer/design
// --out=$(GOPATH)/src/github.com/TinyKitten/ComingServer
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddUsersPayload is the users add action payload.
type AddUsersPayload struct {
	// パスワード
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
	// 権限ID
	PrivilegeID int `form:"privilege_id" json:"privilege_id" yaml:"privilege_id" xml:"privilege_id"`
	// スクリーンネーム
	ScreenName string `form:"screen_name" json:"screen_name" yaml:"screen_name" xml:"screen_name"`
}

// AddUsersPath computes a request path to the add action of users.
func AddUsersPath() string {

	return fmt.Sprintf("/v1/users")
}

// ユーザー追加
func (c *Client) AddUsers(ctx context.Context, path string, payload *AddUsersPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddUsersRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddUsersRequest create the request corresponding to the add action endpoint of the users resource.
func (c *Client) NewAddUsersRequest(ctx context.Context, path string, payload *AddUsersPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListUsersPath computes a request path to the list action of users.
func ListUsersPath() string {

	return fmt.Sprintf("/v1/users")
}

// すべてのユーザーを取得
func (c *Client) ListUsers(ctx context.Context, path string, limit *int, offset *int) (*http.Response, error) {
	req, err := c.NewListUsersRequest(ctx, path, limit, offset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListUsersRequest create the request corresponding to the list action endpoint of the users resource.
func (c *Client) NewListUsersRequest(ctx context.Context, path string, limit *int, offset *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if limit != nil {
		tmp28 := strconv.Itoa(*limit)
		values.Set("limit", tmp28)
	}
	if offset != nil {
		tmp29 := strconv.Itoa(*offset)
		values.Set("offset", tmp29)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.OptionalJWTSigner != nil {
		if err := c.OptionalJWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowUsersPath computes a request path to the show action of users.
func ShowUsersPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/v1/users/%s", param0)
}

// ユーザーをIDで取得
func (c *Client) ShowUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowUsersRequest create the request corresponding to the show action endpoint of the users resource.
func (c *Client) NewShowUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.OptionalJWTSigner != nil {
		if err := c.OptionalJWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
